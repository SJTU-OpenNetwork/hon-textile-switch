package core

import (
	"fmt"
	"time"
	"github.com/ipfs/go-cid"

	"github.com/SJTU-OpenNetwork/hon-textile-switch/broadcast"
	"github.com/SJTU-OpenNetwork/hon-textile-switch/pb"
	"github.com/SJTU-OpenNetwork/hon-textile-switch/host"
	peer "github.com/libp2p/go-libp2p-core/peer"
	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes"
	"github.com/golang/protobuf/ptypes/any"
)
var ErrStreamNotFound = fmt.Errorf("stream not found")
var ErrStreamAlreadyInUse = fmt.Errorf("stream already in use")
type ErrStreamAlreadyExist struct {
	meta *pb.StreamMeta
}
func (e *ErrStreamAlreadyExist) Error() string {
	return fmt.Sprintf("Stream %s already exist in datastore.", e.meta.Id)
}
type ErrStreamNotExist struct {
	Id string
}
func (e *ErrStreamNotExist) Error() string {
	return fmt.Sprintf("Stream %s not exist in datastore.", e.Id)
}


func (t *Textile) GetStreamMeta(id string) *pb.StreamMeta {
	return t.datastore.StreamMetas().Get(id)
}

func (t *Textile) ListStreamMeta() *pb.StreamMetaList{
	return t.datastore.StreamMetas().List()
}

func (t *Textile) handleProviderSearchResult(resultCh <-chan *pb.QueryResult, errCh <-chan error, cancel *broadcast.Broadcaster, config *pb.StreamRequest) (error) {
    timer := time.NewTimer(time.Second * 2) //Wait for 2s
    doneCh := make(chan struct{}, 1)
	done := func() {
		// Use select to avoid block when there is already done signal in channel.
		select {
			case doneCh <- struct{}{}:
			default:
		}
    }
    go func() {
		<-timer.C
		done()
	}()
	go func() {
		for {
			select {
			case <-doneCh:
                t.SubscribeNotify(config.Id, false)
                close(doneCh)
				return
			case err := <-errCh:
                t.SubscribeNotify(config.Id, false)
				return

			case res, ok := <-resultCh:
				if !ok {
					return
				}
				item := &pb.StreamQueryResultItem {}
				proto.Unmarshal(res.Value.Value, item)

                //if already have provider
                //just break
                if t.stream.GetProvider(config.Id) != peer.ID("") {
                    done()
                    timer.Stop()
                    break
                }

                // if the provider is connected, request the stream directly
                connected := host.SwarmConnected(t.node, item.Pid) 
                
                if connected {
                    env, err := t.RequestStream(item.Pid, config)
	                if err != nil{
	    	            break
                    }
                    response := new(pb.StreamRequestHandle)
                    err = ptypes.UnmarshalAny(env.Message.Payload, response)
	                if err!=nil {
	    	            break
	                }
                    if response.Value != 1 {
	    	            break
                    } else {
                        t.SubscribeNotify(config.Id, true)
                        // request is accepted, kill the handle process
                        return
                    }
                } 
			}
		}
	}()
	return nil
}

// do not support substream currently
func (t *Textile) SubscribeNotify(id string, res bool) {
    if res {
        fmt.Printf("Subscribe stream "+id+" success")
    } else {
        fmt.Printf("Subscribe stream "+id+" fail")
    }
}

func (t* Textile) SubscribeStream(id string) error {
    if t.stream.GetProvider(id) != peer.ID("") {
        return fmt.Errorf("Resubscribe stream "+id)
    }
   
    last := t.datastore.StreamBlocks().LastIndex(id)

    config := &pb.StreamRequest {
        Id: id,
        StreamMap: 1,
        StartIndex: last,
    }

    // shadow node should subscribe the same stream
    meta := t.GetStreamMeta(id)
	if meta != nil && !t.config.IsShadow {
        t.shadow.PushStreamMeta(meta, false)
	}

	// call search stream
    query := &pb.StreamQuery { 
        Id: id,
    }
    opt := &pb.QueryOptions {
        Wait: 2,
        Limit: 10,
    }
    resCh, errCh, cancel, err := t.SearchStream(query, opt)
    if err != nil {
        return err
    }
    t.handleProviderSearchResult(resCh, errCh, cancel, config)
	return nil
}

func (t* Textile) UnsubscribeStream(id string) error{
    err := t.stream.UnsubscribeStream(id)
    return err
}

func (t* Textile) RequestStream(pid string, config *pb.StreamRequest) (*pb.Envelope, error){
	return t.stream.SendStreamRequest(pid, config)
}

func (t* Textile) StreamRequestAccepted(pid string, config *pb.StreamRequest) {
	t.stream.RequestAccepted(pid, config)
}

func (t *Textile) SearchStream(query *pb.StreamQuery, options *pb.QueryOptions) (<-chan *pb.QueryResult, <-chan error, *broadcast.Broadcaster, error) {
	log.Debug("in SearchStream")
	payload, err := proto.Marshal(query)
	if err != nil {
		return nil, nil, nil, err
	}

	options.Filter = pb.QueryOptions_HIDE_OLDER

	resCh, errCh, cancel := t.searchByPubsub(&pb.Query{
	//resCh, errCh, cancel := t.searchAll(&pb.Query{
		Type:    pb.Query_STREAM,
		Options: options,
		Payload: &any.Any{
			TypeUrl: "/StreamQuery",
			Value:   payload,
		},
	})
	return resCh, errCh, cancel, nil
}


func (t *Textile) StreamWorkerStat() {
	t.stream.WorkerStat()
}

